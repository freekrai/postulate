{
  "_args": [
    [
      {
        "raw": "freekrai/uberdb",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "freekrai/uberdb",
        "spec": "github:freekrai/uberdb",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:freekrai/uberdb.git",
          "sshUrl": "git+ssh://git@github.com/freekrai/uberdb.git",
          "httpsUrl": "git+https://github.com/freekrai/uberdb.git",
          "gitUrl": "git://github.com/freekrai/uberdb.git",
          "shortcut": "github:freekrai/uberdb",
          "directUrl": "https://raw.githubusercontent.com/freekrai/uberdb/master/package.json"
        }
      },
      "/Users/rogerstringer/git/freekrai/postulate"
    ]
  ],
  "_from": "git+https://github.com/freekrai/uberdb.git#e885c75a0a93c09231b92ea5605f422034ef5c6e",
  "_id": "uberdb@1.0.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/uberdb",
  "_phantomChildren": {},
  "_requested": {
    "raw": "freekrai/uberdb",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "freekrai/uberdb",
    "spec": "github:freekrai/uberdb",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:freekrai/uberdb.git",
      "sshUrl": "git+ssh://git@github.com/freekrai/uberdb.git",
      "httpsUrl": "git+https://github.com/freekrai/uberdb.git",
      "gitUrl": "git://github.com/freekrai/uberdb.git",
      "shortcut": "github:freekrai/uberdb",
      "directUrl": "https://raw.githubusercontent.com/freekrai/uberdb/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/freekrai/uberdb.git#e885c75a0a93c09231b92ea5605f422034ef5c6e",
  "_shasum": "00bff413f42db520537d68d88559148c7299c511",
  "_shrinkwrap": null,
  "_spec": "freekrai/uberdb",
  "_where": "/Users/rogerstringer/git/freekrai/postulate",
  "author": {
    "name": "Roger Stringer",
    "email": "roger@datamcfly.com",
    "url": "http://freekrai.net/"
  },
  "bugs": {
    "url": "https://github.com/freekrai/uberdb/issues"
  },
  "dependencies": {
    "chalk": "^0.4.0",
    "merge": "^1.1.3",
    "node-uuid": "^1.4.1"
  },
  "description": "A Light Weight Disk based JSON Database with a MongoDB like API",
  "devDependencies": {},
  "files": [
    "lib"
  ],
  "gitHead": "e885c75a0a93c09231b92ea5605f422034ef5c6e",
  "homepage": "http://freekrai.github.io/uberDB",
  "keywords": [
    "uberDB",
    "JSON",
    "Database",
    "file system",
    "CRUD",
    "light weight"
  ],
  "license": "MIT",
  "main": "lib/uberdb.js",
  "name": "uberdb",
  "optionalDependencies": {},
  "readme": "# uberDB \n\nA Lightweight JSON Database with a MongoDB like API for Node.\n\n\n##Contents\n\n* [Getting Started](#getting-started)\n* [Documentation](#documentation)\n  * [Connect](#connect-to-db)\n  * [Load Collections](#load-collections)\n  * [Write/Save](#writesave-to-collection)\n  * [Read](#read-from-collection)\n  * [Update](#update-collection)\n  * [Remove](#remove-collection)\n  * [Count](#count)\n* [Examples](#examples)\n* [Release History](#release-history)\n\n## Getting Started\nInstall the module locally :  \n```bash\n$ npm install freekrai/uberdb\n```\n\n```js\nvar db = require('uberdb');\ndb = db.connect('/path/to/db-folder', ['collection-name']);\n// you can access the traditional JSON DB methods here\n```\n\n## Documentation\n### Connect to DB\n```js\ndb.connect(pathToFolder, ['filename']);\n```\nFilename will be the name of the JSON file. You can omit the extension, uberDB will take care of it for you.\n\n```js\nvar db = require('uberdb');\ndb = db.connect('/examples/db', ['posts']);\n// or simply\ndb.connect('/examples/db', ['posts']);\n```\n\nThis will check for a directory at given path, if it does not exits, uberDB will throw an error and exit. \n\nIf the directory exists but the file/collection does not exist, uberDB will create it for you. \n\n**Note** : If you have manually created an empty JSON file, please make sure that it contains at least an empty array.\n\n```js\n[]\n```\n\nOr else it will throw an error like\n\n```bash\nundefined:0\n\n^\nSyntaxError: Unexpected end of input\n```\n\n### Load Collections \n\nAlternatively you can also load collections like \n\n```js\nvar db = require('uberdb');\n// this\ndb = db.connect('/examples/db');\ndb.loadCollections(['posts']);\n//or\ndb.connect('/examples/db');\ndb.loadCollections(['posts']);\n//or\ndb.connect('/examples/db').loadCollections(['posts']);\n//or\ndb.connect('/examples/db', ['posts']);\n```\n\n#### Load Multiple Collections\n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts','comments','users']);\n```\n\n### Write/Save to Collection\n\n```js\ndb.collectioName.save(object);\n```\nOnce you have loaded a collection, you can access the collection's methods using the dot notation like\n\n```js\ndb.[collectionName].[methodname]\n```\n\nTo save the data, you can use\n\n```js\nvar db = require('uberdb');\ndb.connect('db', ['posts']);\nvar post = {\n    title : \"Hello uberDB\",\n    published : \"today\",\n    rating : \"5 stars\"\n}\ndb.posts.save(post);\n// or\ndb.posts.save([post]);\n```\n\nThe saved data will be \n\n```js\n[\n    {\n        \"title\": \"Hello uberDB\",\n        \"published\": \"today\",\n        \"rating\": \"5 stars\",\n        \"_id\": \"0f6047c6c69149f0be0c8f5943be91be\"\n    }\n]\n```\n\nYou can also save multiple objects at once like\n\n```js\nvar db = require('uberdb');\ndb.connect('db', ['posts']);\nvar post1 = {\n    title : 'Hello uberDB',\n    published : 'today',\n    rating : '5 stars'\n}\n\nvar post2 = {\n    title : 'Hello uberDB',\n    published : 'yesterday',\n    rating : '5 stars'\n}\n\nvar post3 = {\n    title : 'Hello uberDB',\n    published : 'today',\n    rating : '4 stars'\n}\ndb.posts.save([post1, post2, post3]);\n```\n\nAnd this will return the inserted objects\n\n```js\n[ { title: 'Hello uberDB',\n    published: 'today',\n    rating: '4 stars',\n    _id: 'b1cdbb3525b84e8c822fc78896d0ca7b' },\n  { title: 'Hello uberDB',\n    published: 'yesterday',\n    rating: '5 stars',\n    _id: '42997c62e1714e9f9d88bf3b87901f3b' },\n  { title: 'Hello uberDB',\n    published: 'today',\n    rating: '5 stars',\n    _id: '4ca1c1597ddc4020bc41b4418e7a568e' } ]\n```\n\n### Read from Collection\n\nThere are 2 methods available for reading the JSON collection\n* db.collectioName.find(query)\n* db.collectioName.findOne(query)\n\n#### db.collectioName.find() \n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\ndb.posts.find();\n```\n\nThis will return all the records\n\n```js\n[{ \n    title: 'Hello uberDB',\n    published: 'today',\n    rating: '5 stars',\n    _id: '0f6047c6c69149f0be0c8f5943be91be' \n}]\n```\n\nYou can also query with a criteria like\n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\ndb.posts.find({rating : \"5 stars\"});\n```\n\nThis will return all the posts which have a rating of 5. \n\nNested JSON : \n\n```js\nvar postComments = {\n    title: 'Hello uberDB',\n    published: '2 days ago',\n    comments: [{\n        name: 'john doe',\n        comment: 'this is cool',\n        rating: 2\n    }, {\n        name: 'brian doe',\n        comment: 'this is super',\n        rating: 3\n    }, {\n        name: 'jason doe',\n        comment: 'this is great',\n        rating: 2\n    }]\n}\n```\n\n```js\nvar savedPost = db.posts.save([postComments);\nfoundPosts = db.posts.find({rating : 2});\n```\n\nKeep in mind that since uberDB is mostly for light weight data storage, avoid nested structures and huge datasets.\n\n#### db.collectioName.findOne(query)\n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\ndb.posts.findOne();\n```\n\nIf you do not pass a query, uberDB will return the first post in the collection. If you pass a query, it will return first post in the filtered data. \n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\ndb.posts.findOne({_id: '0f6047c6c69149f0be0c8f5943be91be'});\n```\n### Update Collection\n\n```js\ndb.collectioName.update(query, data, options);\n```\n\nYou can also update one or many objects in the collection\n\n```js\noptions = {\n    multi: false, // update multiple - default false\n    upsert: false // if object is not found, add it (update-insert) - default false\n}\n```\n\nUsage \n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\n\nvar query = {\n  title : 'Hello uberDB'\n};\n\nvar dataToBeUpdate = {\n  title : 'Hello uberDB again!',\n};\n\nvar options = {\n   multi: false,\n   upsert: false\n};\n\nvar updated = db.posts.update(query, dataToBeUpdate, options);\nconsole.log(updated); // { updated: 1, inserted: 0 }\n```\n\n### Remove Collection\n\n```js\ndb.collectioName.remove(query, multi);\n```\n\nYou can remove the entire collection (including the file) or you can remove the matched objects by passing in a query. When you pass a query, you can either delete all the matched objects or only the first one by passing `multi` as `false`. The default value of `multi` is `true`.\n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\ndb.posts.remove({rating : \"5 stars\"});\n```\n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\ndb.posts.remove({rating : \"5 stars\"}, true); // remove all matched. Default - multi = true\n```\n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\ndb.posts.remove({rating : \"5 stars\"}, false); // remove only the first match\n```\n\nUsing remove without any params will delete the file and will remove the db instance.\n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\ndb.posts.remove();\n```\n\nAfter the above operation `db.posts` is `undefined`.\n\n### Count\n\n```js\ndb.collectioName.count();\n```\n\nWill return the count of objects in the Collection\n\n```js\nvar db = require('uberdb');\ndb.connect('/examples/db', ['posts']);\ndb.posts.count(); // will give the count\n```\n\n## Examples\n\nRefer to the [examples](https://github.com/freekrai/uberDB/tree/master/examples) folder.\n\n## Release History\n* 1.0.x\n  * Base Module with\n    * Connect to a Folder\n    * Access a Collection/File\n    * Create Read Update Delete on JSON object\n    * Minor fixes and tests\n    * Performance improvements\n\n## License\nCopyright (c) 2015 Roger Stringer. Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/freekrai/uberdb.git"
  },
  "version": "1.0.4"
}
